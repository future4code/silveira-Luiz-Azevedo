### Exercício 1
CREATE TABLE Rating (
		id VARCHAR(255) PRIMARY KEY,
    comment TEXT NOT NULL,
		rate FLOAT NOT NULL,
    movie_id VARCHAR(255),
    FOREIGN KEY (movie_id) REFERENCES Movie(id)
);

> a) Explique o que é uma chave estrangeira
> é uma ferramenta para criar relações entre tabelas, onde uma coluna se refencia à coluna primária de outra tabela, podendo criar relações 1:1, 1:N ou N:M;
> b) Crie a tabela e, ao menos, uma avaliação para cada um dos filmes;
INSERT INTO Rating VALUES ("001", "Excelente filme", 9.8, "001");
INSERT INTO Rating VALUES ("002", "Filme legal", 9.5, "002");
INSERT INTO Rating VALUES ("003", "Emocionante", 9.4, "003");

> c) Tente criar uma avaliação para um filme que não existe (ou seja, um id inválido). Anote e explique o resultado da query.
 INSERT INTO Rating VALUES ("004", "Excelente filme", 9.8, "003");
 > Error Code: 1452. Cannot add or update a child row: a foreign key constraint fails (`silveira-21814745-luiz-azevedo`.`Rating`, CONSTRAINT `Rating_ibfk_1` FOREIGN KEY (`movie_id`) REFERENCES `Movie` (`id`))
 > aponta que a chave estrangeira falhou ao procurar o id "003" na tabela Movie e, portanto, os valores das colunas referenciadas não bateram;

> d) Altere a tabela de filmes para que ela não tenha mais uma coluna chamada rating.*
 ALTER TABLE Movie DROP COLUMN rating;
> e) Tente apagar um filme que possua avaliações. Anote e explique o resultado da query.*
 DELETE FROM Movie WHERE id = "001";
 > Error Code: 1451. Cannot delete or update a parent row: a foreign key constraint fails (`silveira-21814745-luiz-azevedo`.`Rating`, CONSTRAINT `Rating_ibfk_1` FOREIGN KEY (`movie_id`) REFERENCES `Movie` (`id`))
 > não permite que exclua pois há colunas sendo referenciadas na tabela e deve existir conteúdo nas colunas referenciadas
 ###Exercício 2 
 CREATE TABLE MovieCast (
		movie_id VARCHAR(255),
		actor_id VARCHAR(255),
    FOREIGN KEY (movie_id) REFERENCES Movie(id),
    FOREIGN KEY (actor_id) REFERENCES Actor(id)
);
 > a) Explique, com as suas palavras, essa tabela*
> uma tabela que guarda as informações da coluna id dos filmes e uma coluna da id dos atores, ou seja, cada coluna faz referencia a uma coluna de outra tabela externa;
> b) Crie, ao menos, 6 relações nessa tabela* 
INSERT INTO MovieCast VALUES("001", "003");
INSERT INTO MovieCast VALUES("001", "004");
INSERT INTO MovieCast VALUES("002", "002");
INSERT INTO MovieCast VALUES("002", "003");
INSERT INTO MovieCast VALUES("003", "001");
INSERT INTO MovieCast VALUES("003", "004");
> c) Tente criar uma relação com um filme ou um ator inexistente. Anote e explique o resultado da query*
INSERT INTO MovieCast VALUES("001", "006");
> aponta que a chave estrangeira falhou ao procurar o id "006" na tabela Actor e, portanto, os valores das colunas referenciadas não bateram e a referência não pode ocorrer
> d) Tente apagar um ator que possua uma relação nessa tabela. Anote e explique o resultado da query*
DELETE FROM Actor WHERE id = "004";
> não permite pois há colunas de outras tabelas se relacionando com essa linha e não é possível existir referências sem correspondência externa;

### Exercício 3
SELECT * FROM Movie INNER JOIN Rating ON Movie.id = Rating.movie_id;
> a) Explique, com suas palavras, a query acima. O que é o operador `ON`?*
> ON é uma condição que indica onde as relações acontecem para que a junção das tabelas ocorra. 
> Indicamos através do INNER JOIN que queremos unir as tabelas Movie e Rating onde a coluna id se relaciona com a movie.id, das respectivas tabelas

> b) Escreva uma query que retorne somente o nome, id e nota de avaliação dos filmes que já foram avaliados.*
SELECT Movie.id, Movie.nome, Movie.avaliacao FROM Movie INNER JOIN Rating ON Movie.id = Rating.movie_id;
SELECT Movie.id, Movie.nome, Movie.avaliacao, Rating.comment, Rating.rate FROM Movie INNER JOIN Rating ON Movie.id = Rating.movie_id;
