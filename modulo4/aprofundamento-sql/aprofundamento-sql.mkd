SET SQL_SAFE_UPDATES = 0;

> add uma coluna com algum valor padrão: ALTER TABLE tabela ADD coluna tipo DEFAULT "valor";
ALTER TABLE Actor ADD favorite_ice_cream_flavor VARCHAR(255);
select * from Actor;
ALTER TABLE Actor ADD type VARCHAR(255) DEFAULT "NotDirector";

### Exercício 1
> a) ALTER TABLE Actor DROP COLUMN salary; exclui a coluna salary da tabela Actor
> b) ALTER TABLE Actor CHANGE gender sex VARCHAR(6); redeclara a coluna gender como sex, cujo tipo é VARCHAR(6)
> c) ALTER TABLE Actor CHANGE gender gender VARCHAR(255); redeclara a coluna gender por gender, atribuindo o tipo VARCHAR(255)
> d) alterar a coluna genero para aceitar apenas 100 caracteres 
ALTER TABLE Actor CHANGE gender gender VARCHAR(100);

### Exercício 2
> A query abaixo muda o nome do ator com id 123 para Moacyr Franco: 
UPDATE Actor SET name = "Moacyr Franco" WHERE id = "123";
> a) Escreva uma query que atualize o nome e a data de nascimento do ator com o id 003
UPDATE Actor SET name = "Fernanda Torres", birth_date = "1974-10-21" WHERE id = 003; 
> b) Escreva uma query que atualize o nome da atriz Juliana Paes para JULIANA PAES. Então, escreva outra query para voltar ao nome anterior.
UPDATE Actor SET name = "JULIANA PAES" WHERE name = "Juliana Paes";
UPDATE Actor SET name = "Juliana Paes" WHERE name = "JULIANA PAES";
> c) Escreva uma query que atualize todas as informações do ator com o id 005
UPDATE Actor SET name = "Lazaro Ramos", salary = 935000, birth_date = "1980-04-10", gender = "male", favorite_ice_cream_flavor = "morango", type = "Director"  WHERE id = 005;
> d) Escreva uma query em que você tente atualizar um dado da tabela que não existe (com um id inválido, por exemplo). Teste, anote e explique o resultado. 
UPDATE Actor SET name = "Juliana Paes" WHERE id = "oij";
> não apontou nenhum erro de sintaxe, mas não alterou nada da tabela, pois a id "oij" não existe.

### Exercício 3
> Se quisermos apagar o ator com o nome Tony Ramos:
DELETE FROM Actor WHERE name = "Tony Ramos";
> a) Escreva uma query que apague a atriz com o nome Fernanda Torres;
DELETE FROM Actor WHERE name = "Fernanda Torres";
> b) Escreva uma query que apague todos os atores (do gênero male) com o salário maior do que R$1.000.000,00
DELETE FROM Actor WHERE gender = "male" AND salary > 1000000;

### Exercício 4
> se quisermos contar todos os atores, poderíamos fazer assim:
SELECT COUNT(*) FROM Actor;
> ver a quantidade de atrizes no nosso banco
SELECT COUNT(*) FROM Actor WHERE gender = "female";
> a média dos salários dos atores
SELECT AVG(salary) FROM Actor;
> MAX e MIN que permitem determinar os valores máximos e mínimos de uma coluna;

> a)  Escreva uma query que pegue o maior salário de todos os atores e atrizes
SELECT MAX(salary) from Actor;
> b) Escreva uma query que pegue o menor salário das atrizes
SELECT 	MIN(salary) from Actor;
> c) Escreva uma query que pegue a quantidade de atrizes
SELECT COUNT(*) FROM Actor WHERE gender = "female";
> d) Escreva uma query que pegue a soma de todos os salários
SELECT SUM(salary) FROM Actor;

### Exercício 5 
> O LIMIT, como o próprio nome sugere, limita a quantidade de dados retornados. Se quisermos somente 3 atores da tabela:
SELECT * FROM Actor LIMIT 3;
> ORDER BY ASC/DESC Se quisermos os atores em ordem alfabética:
SELECT * FROM Actor ORDER BY name ASC;
> Podemos juntar com o LIMIT e pegarmos os 4 primeiros atores (em ordem alfabética):
SELECT * FROM Actor WHERE gender = 'female' ORDER BY name ASC LIMIT 4;
> GROUP BY. Ele normalmente é usado junto com algumas das funções que já vimos: AVG, COUNT, SUM, etc. A query abaixo retorna a quantidade de atores e atrizes na tabela (ou seja, em relação ao gender)
SELECT COUNT(*), gender FROM Actor GROUP BY gender;

> a) Releia a última query. Teste-a. Explique o resultado com as suas palavras:
> retorna a quantidade de itens da coluna gender, separando os itens de acordo com os valores de gender diferentes;
> b) Faça uma query que retorne somente o id e o nome dos atores em ordem decrescente alfabética
SELECT id, name FROM Actor ORDER BY name DESC;
> c) Faça uma query que retorne todos os atores ordenados pelo salário
SELECT * FROM Actor ORDER BY salary ASC;
> d) Faça uma query que retorne os atores com os três maiores salarios
SELECT * FROM Actor WHERE gender = "male"  ORDER BY salary DESC LIMIT 3;
> e) Faça uma query que retorne a média de salário por gênero
SELECT AVG(salary), gender FROM Actor  GROUP BY gender;

### Exercício 6
SELECT * FROM Filmes;
describe Filmes;
> a) Altere a tabela de Movie e adicione um novo parâmetro: playing_limit_date que indique a data limite em que o filme será passado no cinema. 
ALTER TABLE Filmes CHANGE playing_limit_date playing_limit_date DATE;
> b) Altere a tabela de Movie para que o parâmetro rating possa aceitar valores não inteiros, como, por exemplo, uma avaliação 8.5.
ALTER TABLE Filmes CHANGE avaliacao avaliacao FLOAT;
> c) Atualize dois filmes de tal forma que tenhamos um que ainda esteja em cartaz e um que já tenha saído
UPDATE Filmes SET nome = "Black Panther: Wakanda Forever", sinopse = "Black Panther: Wakanda Forever é um futuro filme estadunidense de super-herói baseado no personagem Pantera Negra da Marvel Comics. Produzido pelo Marvel Studios e distribuído pela Walt Disney Studios Motion Pictures, é a sequência de Pantera Negra e o trigésimo filme do Universo Cinematográfico Marvel", data_de_lancamento = "2022-11-10", avaliacao = 10, playing_limit_date = "2022-12-31" WHERE id = 001;
UPDATE Filmes SET nome = "Medida Provisória", sinopse = "Em uma iniciativa de reparação pelo passado escravocrata, o governo brasileiro decreta uma medida provisória e provoca uma reação imediata no Congresso Nacional. Os parlamentares aprovam uma medida que obriga os cidadãos negros a se mudar para a África na intenção de retomar as suas origens. A aprovação afeta diretamente a vida do casal formado pela médica Capitú e pelo advogado Antonio, além de seu primo, o jornalista André, que mora com eles no mesmo apartamento.", data_de_lancamento = "2022-04-14", avaliacao = 8.8, playing_limit_date = "2022-05-31" WHERE id = 002;
> d) Delete algum dos filmes, mas guarde o id. Tente fazer uma query para atualizar a sinopse desse filme que você acabou de deletar (usando o mesmo id). Anote o resultado e explique.
DELETE FROM Filmes WHERE id = 003;
UPDATE Filmes SET sinopse = "Labeloucuras" WHERE id = 003;
> o programa não acusa nenhum erro de sintaxe e executa o código, mas não há alterações na tabela, pois o item cuja id foi passada não existe mais.