###Exercício 1
-- a) Explique como é a resposta que temos quando usamos o raw:
-- Sempre que fizermos SELECT usando RAW ele vai entregar um vetor com dois tipos de informações: a resposta do banco de dados e as informações técnicas; então colocamos o índice [0] como resposta do send.
app.get('/users/:id', async (req: Request, res: Response) =>{
    try{
    const id = req.params.id;
    const resultado = await connection.raw(`
    SELECT * FROM Actor WHERE id = "${id}"
    `)
    res.status(200).send({message: resultado[0]})
    } catch(err:any){
    res.status(500).send(err.sqlMessage || err.message)
    }
    })
    
-- b) Faça uma função que busque um ator pelo nome;
    const getActorByName = async (name: string): Promise<any> => {
        const result = await connection.raw(`
          SELECT * FROM Actor WHERE name = '${name}'
        `)
      
          return result[0][0]
      }
    //   getActorByName("Angela Davies")
    //   	.then(result => {
    //   		console.log(result)
    //   	})
    //   	.catch(err => {
    //   		console.log(err)
    //   	});
      
      // Assim a chamada funciona fora dos endpoints com await
      (async () => {
        console.log(await getActorByName("Angela Davies") )
      })()
      
    -- c) Faça uma função que receba um gender retorne a quantidade de itens na tabela Actor com esse gender. Para atrizes, female e para atores male.
    const getCountOfActorsByGender = async (gender: string): Promise<any> => {
        const result = await connection.raw(`
          SELECT COUNT(*) FROM Actor WHERE gender = '${gender}'
        `)
      
          return result[0][0]
      }
      getCountOfActorsByGender("female")
      	.then(result => {
      		console.log(result)
      	})
      	.catch(err => {
      		console.log(err)
      	});
      
    ###Exercício 2
    const createActor = async (
        id: string,
        name: string,
        salary: number,
        dateOfBirth: Date,
        gender: string
      ): Promise<void> => {
        await connection
          .insert({
            id: id,
            name: name,
            salary: salary,
            birth_date: dateOfBirth,
            gender: gender,
          })
          .into("Actor");
      };

    -- a) Uma função que receba um salário e um id e realiza a atualização do salário do ator em questão
    const updateActorSalary = async (id: string, salary: number): Promise<any> => {
        await connection("Actor")
          .update({
            salary: salary,
          })
          .where("id", id);
     
          const result = await connection.raw(`
          SELECT * FROM Actor WHERE id = '${id}'
        `)
      
          return result[0][0]
      };
      updateActorSalary("001", 3500)
      .then(result => {
        console.log(result)
    })
    .catch(err => {
        console.log(err)
    });
    -- b) Uma função que receba um id e delete um ator da tabela
    const deleteActor = async (id: string): Promise<any> => {
        await connection("Actor")
          .delete()
          .where("id", id);

          const result = await connection.raw(`
          SELECT * FROM Actor
          `)
          return result[0]
    };
    deleteActor("001")
      .then(result => {
        console.table(result)
    })
    .catch(err => {
        console.log(err)
    });
    -- c) Uma função que receba um gender e devolva a média dos salários de atrizes ou atores desse gender
    const avgSalary = async (gender: string): Promise<any> => {
            const result = await connection("Actor")
              .avg("salary as average") //não sei de onde vieram essas sintaxes
              .where({ gender });
          
            return result[0].average;
          };
    avgSalary("male")
      .then(result => {
        console.table(result)
    })
    .catch(err => {
        console.log(err)
    });

    ###Exercício 3
    app.get("/actor/:id", async (req: Request, res: Response) => {
        try {
          const id = req.params.id;
          const actor = await getActorById(id);
      
          res.status(200).send(actor)
        } catch (err:any) {
          res.status(400).send({
            message: err.message,
          });
        }
      });
      -- b)Crie um endpoint agora com as seguintes especificações:
        -- - Deve ser um GET (`/actor`)
        -- - Receber o gênero como um *query param* (`/actor?gender=`)
        -- - Devolver a quantidade de atores/atrizes desse gênero
        app.get("/actor", async (req: Request, res: Response) => {
            try {
              const gender = req.query.gender as string;
              const countActor = await getCountOfActorsByGender(gender);
          
              res.status(200).send(countActor)
            } catch (err:any) {
              res.status(400).send({
                message: err.message,
              });
            }
          });

    ###Exercício 4
    app.post("/actor", async (req: Request, res: Response) => {
        try {
          await createActor(
            req.body.id,
            req.body.name,
            req.body.salary,
            new Date(req.body.dateOfBirth),
            req.body.gender
          );
      const table = await connection.raw(`SELECT * FROM Actor;`)
          res.status(200).send(table);
        } catch (err:any) {
          res.status(400).send({
            message: err.message,
          });
        }
      });
    -- a) Endpoint para atualizar salário com id
    app.put("/actor", async (req: Request, res: Response) => {
        try {
            const id = req.body.id as string
            const newSalary = req.body.salary as number
          await updateActorSalary(id, newSalary);
          const result = await connection.raw(`
          SELECT * FROM Actor WHERE id = '${id}'
        `)
          res.status(200).send(result[0]);
        } catch (err:any) {
          res.status(400).send({
            message: err.message,
          });
        }
      });
      -- b) Endpoint para deletar ator da tabela
      app.delete("/actor", async (req: Request, res: Response) => {
        try {
            const id = req.query.id as string
          await deleteActor(id,);
          const result = await connection.raw(`
          SELECT * FROM Actor
        `)
          res.status(200).send(result[0]);
        } catch (err:any) {
          res.status(400).send({
            message: err.message,
          });
        }
      });